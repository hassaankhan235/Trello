{"ast":null,"code":"var _jsxFileName = \"/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx\";\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { FindItemIndexById } from './FinItemByIndex';\nconst appData = {\n  lists: [{\n    id: \"0\",\n    text: \"To Do\",\n    tasks: [{\n      id: \"c0\",\n      text: \"Generate app scaffold\"\n    }]\n  }, {\n    id: \"1\",\n    text: \"In Progress\",\n    tasks: [{\n      id: \"c2\",\n      text: \"Learn Typescript\"\n    }]\n  }, {\n    id: \"2\",\n    text: \"Done\",\n    tasks: [{\n      id: \"c3\",\n      text: \"Begin to use static typing\"\n    }]\n  }]\n};\nconst AppStateContext = createContext({});\n\nconst appStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        return { ...state,\n          lists: [...state.lists, {\n            id: uuid(),\n            text: action.payload,\n            tasks: []\n          }]\n        };\n      }\n\n    case \"ADD_TASK\":\n      {\n        const TargetIndex = FindItemIndexById(state.lists, action.payload.taskID);\n        state.lists[TargetIndex].tasks.push({\n          id: uuid(),\n          text: action.payload.text\n        });\n      }\n      return { ...state\n      };\n  }\n};\n\nexport const AppStateProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  return /*#__PURE__*/React.createElement(AppStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, children);\n};\nexport const UseAppState = () => {\n  return useContext(AppStateContext);\n};","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx"],"names":["React","createContext","useContext","useReducer","FindItemIndexById","appData","lists","id","text","tasks","AppStateContext","appStateReducer","state","action","type","uuid","payload","TargetIndex","taskID","push","AppStateProvider","children","dispatch","UseAppState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAGA,MAAMC,OAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,CACP;AACAC,IAAAA,EAAE,EAAE,GADJ;AAEAC,IAAAA,IAAI,EAAE,OAFN;AAGAC,IAAAA,KAAK,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,IAAI,EAAE;AAAlB,KAAD;AAHP,GADO,EAMP;AACAD,IAAAA,EAAE,EAAE,GADJ;AAEAC,IAAAA,IAAI,EAAE,aAFN;AAGAC,IAAAA,KAAK,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,IAAI,EAAE;AAAlB,KAAD;AAHP,GANO,EAWP;AACAD,IAAAA,EAAE,EAAE,GADJ;AAEAC,IAAAA,IAAI,EAAE,MAFN;AAGAC,IAAAA,KAAK,EAAE,CAAC;AAAEF,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,IAAI,EAAE;AAAlB,KAAD;AAHP,GAXO;AADe,CAA1B;AAuCI,MAAME,eAAe,GAAGT,aAAa,CAAuB,EAAvB,CAArC;;AAYI,MAAMU,eAAe,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAAkD;AAC1E,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,UAAL;AAAiB;AACb,eAAM,EACF,GAAGF,KADD;AAEFN,UAAAA,KAAK,EAAG,CACJ,GAAGM,KAAK,CAACN,KADL,EACY;AAACC,YAAAA,EAAE,EAAGQ,IAAI,EAAV;AAAcP,YAAAA,IAAI,EAAEK,MAAM,CAACG,OAA3B;AAAoCP,YAAAA,KAAK,EAAC;AAA1C,WADZ;AAFN,SAAN;AAOH;;AACD,SAAK,UAAL;AAAkB;AACd,cAAMQ,WAAW,GAAGb,iBAAiB,CAACQ,KAAK,CAACN,KAAP,EAAcO,MAAM,CAACG,OAAP,CAAeE,MAA7B,CAArC;AACAN,QAAAA,KAAK,CAACN,KAAN,CAAYW,WAAZ,EAAyBR,KAAzB,CAA+BU,IAA/B,CAAoC;AAChCZ,UAAAA,EAAE,EAAEQ,IAAI,EADwB;AAEhCP,UAAAA,IAAI,EAAEK,MAAM,CAACG,OAAP,CAAeR;AAFW,SAApC;AAIH;AACD,aAAM,EACF,GAAGI;AADD,OAAN;AAjBJ;AAqBH,CAtBG;;AAwBJ,OAAO,MAAMQ,gBAAgB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA8C;AAC1E,QAAM,CAACT,KAAD,EAAQU,QAAR,IAAoBnB,UAAU,CAACQ,eAAD,EAAkBN,OAAlB,CAApC;AACI,sBACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAI;AAACO,MAAAA,KAAD;AAAQU,MAAAA;AAAR,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ;AAKH,CAPE;AASP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC7B,SAAOrB,UAAU,CAACQ,eAAD,CAAjB;AACH,CAFM","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\"\nimport { FindItemIndexById } from './FinItemByIndex'\nimport { type } from \"os\"\n\nconst appData: AppState = {\n    lists: [\n    {\n    id: \"0\",\n    text: \"To Do\",\n    tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\n    },\n    {\n    id: \"1\",\n    text: \"In Progress\",\n    tasks: [{ id: \"c2\", text: \"Learn Typescript\" }]\n    },\n    {\n    id: \"2\",\n    text: \"Done\",\n    tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n    }\n    ]\n    }\n    \n    interface Task {\n        id : string\n        text: string\n    }\n\n    interface List {\n        id : string\n        text : string\n        tasks : Task[]\n    }\n    interface AppState {\n        lists : List[]\n    }\n\n    interface AppStateContextProps {\n        state : AppState\n        dispatch : React.Dispatch<string>\n    }\n\n    const AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\n    type Action = \n        | {\n            type: 'ADD_LIST'\n            payload: 'string'\n        }\n        | {\n            type: \"ADD_TASK\"\n            payload: {text: string; taskId: string}\n        }\n   \n        const appStateReducer = (state : AppState, action : Action) : AppState => {\n        switch(action.type){\n            case \"ADD_LIST\": {\n                return{\n                    ...state,\n                    lists : [\n                        ...state.lists, {id : uuid(), text: action.payload, tasks:[]}\n                    ]\n                    \n                }\n            }\n            case \"ADD_TASK\" : {\n                const TargetIndex = FindItemIndexById(state.lists, action.payload.taskID)\n                state.lists[TargetIndex].tasks.push({\n                    id: uuid(),\n                    text: action.payload.text\n                })\n            }\n            return{\n                ...state\n            }\n        }\n    }\n\n    export const AppStateProvider = ({children} : React.PropsWithChildren<{}>) => {\n        const [state, dispatch] = useReducer(appStateReducer, appData)\n            return(\n                <AppStateContext.Provider value = {{state, dispatch}}>\n                    {children}\n                </AppStateContext.Provider>\n            )\n        }\n\n    export const UseAppState = () => {\n        return useContext(AppStateContext)\n    }"]},"metadata":{},"sourceType":"module"}