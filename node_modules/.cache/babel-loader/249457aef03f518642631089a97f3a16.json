{"ast":null,"code":"import React from'react';import{ColumnContainer,ColumnTitle}from'../styles/styles';import AddNewItem from'../components/AddNewItem';import{UseAppState}from'../AppStateContect';import Card from'./Card';import{findIdByDraggedProp}from'../FinItemByIndex';export default function Column(_ref){var text=_ref.text,index=_ref.index,id=_ref.id;var _UseAppState=UseAppState(),state=_UseAppState.state,dispatch=_UseAppState.dispatch;var handle=function handle(tid){setTimeout(function(){return dispatch({type:\"DRAGGED_TASK\",payload:{Cid:id,taskId:tid}});},0);};var _DragEnd=function DragEnd(tid){setTimeout(function(){return dispatch({type:\"DRAGGED_TASK_END\",payload:{Cid:id,taskId:tid}});},0);};var DragDrop=function DragDrop(e,Cid,tid){dispatch({type:\"DROP\",payload:{e:e,Cid:id,taskId:tid}});};return/*#__PURE__*/React.createElement(ColumnContainer,{onDrop:function onDrop(e){return DragDrop(e,id,findIdByDraggedProp(index,state));},onDragOver:function onDragOver(e){return e.preventDefault();},onDragEnter:function onDragEnter(e){return e.preventDefault();}},/*#__PURE__*/React.createElement(ColumnTitle,null,\" \",text,\" \"),state.lists[index].tasks.map(function(task){if(task!==null){return/*#__PURE__*/React.createElement(Card,{text:task===null||task===void 0?void 0:task.text,key:task.id,hidden:task.drag,handleDrag:function handleDrag(){return handle(task.id);},DragEnd:function DragEnd(){return _DragEnd(task.id);},DragOver:function DragOver(e){return e.preventDefault();},DragEnter:function DragEnter(e){return e.preventDefault();},DragDrop:function DragDrop(e){return e.preventDefault();}});}}),/*#__PURE__*/React.createElement(AddNewItem,{dark:true,toggleButtonText:\"+ Add another task\",onAdd:function onAdd(text){dispatch({type:\"ADD_TASK\",payload:{text:text,taskId:id}});}}));}","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/components/Column.tsx"],"names":["React","ColumnContainer","ColumnTitle","AddNewItem","UseAppState","Card","findIdByDraggedProp","Column","text","index","id","state","dispatch","handle","tid","setTimeout","type","payload","Cid","taskId","DragEnd","DragDrop","e","preventDefault","lists","tasks","map","task","drag"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren } from 'react'\nimport {ColumnContainer, ColumnTitle} from '../styles/styles'\nimport AddNewItem from '../components/AddNewItem'\nimport { UseAppState } from '../AppStateContect'\nimport Card from './Card'\nimport {findIdByDraggedProp} from '../FinItemByIndex'\n\n\ninterface ColumnProps {\n    text : string \n    index : number\n    id: string\n}\n\nexport default function Column({text, index, id} : PropsWithChildren<ColumnProps>) {\n  \n  const {state, dispatch} = UseAppState()\n\n  const handle = (tid: string) => {\n    setTimeout(() => dispatch({type:\"DRAGGED_TASK\", payload:{Cid: id, taskId: tid} }),\n      0\n    )\n  }\n  const DragEnd = (tid: string) => {\n    setTimeout(() => dispatch({type:\"DRAGGED_TASK_END\", payload:{Cid: id, taskId: tid} }),\n      0\n    )\n  }\n  const DragDrop = (e:React.DragEvent,  Cid: string, tid: string ) => {\n    dispatch({type:\"DROP\", payload:{e ,Cid: id, taskId: tid} })\n  }\n\n\n  \n  return (\n    <ColumnContainer  \n    onDrop = {(e) => DragDrop(e, id, findIdByDraggedProp(index, state))} \n    onDragOver = {(e) => e.preventDefault() }\n    onDragEnter= {(e) => e.preventDefault()} >\n    <ColumnTitle> {text} </ColumnTitle>\n    {state.lists[index].tasks.map((task) => {\n      if(task !== null){\n        return <Card text = {task?.text}  \n      key = {task.id}\n      hidden = {task.drag}\n      handleDrag = {() => handle(task.id)}\n      DragEnd = {() => DragEnd(task.id)} \n      DragOver = {(e) => e.preventDefault() }\n      DragEnter= {(e) => e.preventDefault()} \n      DragDrop = {(e) => e.preventDefault()}\n     />\n    }\n      })\n      }\n    <AddNewItem dark toggleButtonText= \"+ Add another task\" \n    onAdd= {\n      (text) => {dispatch({type:\"ADD_TASK\", payload:{text, taskId: id}})\n    }\n    } />\n    </ColumnContainer>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}