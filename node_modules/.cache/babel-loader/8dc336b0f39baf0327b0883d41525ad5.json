{"ast":null,"code":"var _jsxFileName = \"/home/khan/Desktop/Self Programming/typescript/practice/src/App.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Column from \"./components/Column\";\nimport { AppContainer } from \"./styles/styles\";\nimport AddNewItem from './components/AddNewItem';\nimport { UseAppState } from './AppStateContect';\n\nconst App = () => {\n  const {\n    st,\n    setSt\n  } = useState();\n  useEffect(() => {\n    const init = () => {\n      const {\n        state,\n        dispatch\n      } = UseAppState();\n      localStorage.setItem(\"Task_Status\", JSON.stringify(state));\n    };\n\n    init();\n    const midState = localStorage.getItem('Task_Status');\n    setSt(JSON.parse(midState));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AppContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, st.lists.map((list, i) => /*#__PURE__*/React.createElement(Column, {\n    id: list.id,\n    text: list.text,\n    key: list.id,\n    index: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(AddNewItem, {\n    toggleButtonText: 'create new list',\n    onAdd: text => dispatch({\n      type: \"ADD_LIST\",\n      payload: text\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/App.tsx"],"names":["React","useEffect","useState","Column","AppContainer","AddNewItem","UseAppState","App","st","setSt","init","state","dispatch","localStorage","setItem","JSON","stringify","midState","getItem","parse","lists","map","list","i","id","text","type","payload"],"mappings":";AAAA,OAAOA,KAAP,IAAmCC,SAAnC,EAA8CC,QAA9C,QAA6D,OAA7D;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,UAAP,MAAwB,yBAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;;AAKA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM;AAACC,IAAAA,EAAD;AAAMC,IAAAA;AAAN,MAAeP,QAAQ,EAA7B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,IAAI,GAAG,MAAM;AACjB,YAAK;AAACC,QAAAA,KAAD;AAAQC,QAAAA;AAAR,UAAoBN,WAAW,EAApC;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAnC;AACD,KAHD;;AAIAD,IAAAA,IAAI;AACJ,UAAMO,QAAQ,GAAGJ,YAAY,CAACK,OAAb,CAAqB,aAArB,CAAjB;AACAT,IAAAA,KAAK,CAACM,IAAI,CAACI,KAAL,CAAWF,QAAX,CAAD,CAAL;AAED,GATQ,CAAT;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIT,EAAE,CAACY,KAAH,CAASC,GAAT,CAAa,CAACC,IAAD,EAAOC,CAAP,kBACX,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAED,IAAI,CAACE,EAAjB;AAAqB,IAAA,IAAI,EAAGF,IAAI,CAACG,IAAjC;AAAuC,IAAA,GAAG,EAAIH,IAAI,CAACE,EAAnD;AAAuD,IAAA,KAAK,EAAID,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,eAME,oBAAC,UAAD;AAAY,IAAA,gBAAgB,EAAE,iBAA9B;AAAiD,IAAA,KAAK,EAAEE,IAAI,IAAIb,QAAQ,CAAC;AAAEc,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAGF;AAA9B,KAAD,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,CADF;AAaD,CA1BD;;AA4BA,eAAelB,GAAf","sourcesContent":["import React, { PropsWithChildren, useEffect, useState} from \"react\";\nimport \"./App.css\";\nimport Column from \"./components/Column\";\nimport { AppContainer } from \"./styles/styles\";\nimport AddNewItem  from './components/AddNewItem'\nimport { UseAppState } from './AppStateContect'\nimport {AppState} from './type'\n\n\n\nconst App = () => {\n  const {st , setSt} = useState<AppState>()  \n\n  useEffect(() => {\n    const init = () => {\n      const{state, dispatch} = UseAppState()\n      localStorage.setItem(\"Task_Status\",JSON.stringify(state))\n    }\n    init() \n    const midState = localStorage.getItem('Task_Status') as string\n    setSt(JSON.parse(midState))\n\n  })\n  return (\n    <div className=\"App\">\n      <AppContainer>\n        {\n          st.lists.map((list, i) => (\n            <Column id={list.id} text= {list.text} key = {list.id} index = {i}  />\n            ))\n        }\n        <AddNewItem toggleButtonText={'create new list'} onAdd={text => dispatch({ type: \"ADD_LIST\", payload:  text })}\n/>\n      </AppContainer>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}