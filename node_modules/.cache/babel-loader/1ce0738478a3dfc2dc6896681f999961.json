{"ast":null,"code":"var _jsxFileName = \"/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx\";\nimport React, { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { v1 as uuid } from \"uuid\";\nimport { FindItemIndexById, findObjectIDByDraggedProp, findDragStartCol, findDraggedTaskIndex } from './FinItemByIndex';\nconst appData = {\n  lists: [{\n    id: \"0\",\n    text: \"To Do\",\n    dragged: false,\n    tasks: [{\n      id: \"c0\",\n      text: \"Generate app scaffold\",\n      drag: false\n    }]\n  }, {\n    id: \"1\",\n    text: \"In Progress\",\n    dragged: false,\n    tasks: [{\n      id: \"c1\",\n      text: \"Learn Typescript\",\n      drag: false\n    }]\n  }, {\n    id: \"2\",\n    text: \"Done\",\n    dragged: false,\n    tasks: [{\n      id: \"c3\",\n      text: \"Begin to use static typing\",\n      drag: false\n    }]\n  }]\n};\nuseEffect(() => {\n  localStorage.setItem('list', JSON.stringify(appData));\n}, [appData]);\nconst InitialState = {\n  appData: localStorage.getItem('list') == null ? [] : JSON.parse(localStorage.getItem('list'))\n};\nconst AppStateContext = createContext({});\n\nconst appStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        return { ...state,\n          lists: [...state.lists, {\n            id: uuid(),\n            text: action.payload,\n            dragged: false,\n            tasks: []\n          }]\n        };\n      }\n\n    case \"ADD_TASK\":\n      {\n        const TargetIndex = FindItemIndexById(state.lists, action.payload.taskId);\n        state.lists[TargetIndex].tasks.push({\n          id: uuid(),\n          text: action.payload.text,\n          drag: false\n        });\n        return { ...state\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        const removeIndex = FindItemIndexById(state.lists, action.payload.taskId);\n        state.lists.filter(item => item.id !== removeIndex.toString());\n        return { ...state\n        };\n      }\n\n    case \"DRAGGED_TASK\":\n      {\n        const TargetCol = FindItemIndexById(state.lists, action.payload.Cid);\n        const TaskIndex = findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid);\n        state.lists[TargetCol].dragged = true;\n        state.lists[TargetCol].tasks[TaskIndex].drag = true;\n        return { ...state\n        };\n      }\n\n    case \"DRAGGED_TASK_END\":\n      {\n        const TargetCol = FindItemIndexById(state.lists, action.payload.Cid);\n        const TaskIndex = findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid);\n        state.lists.map(list => {\n          if (list.dragged === true) {\n            list.dragged = false;\n          }\n\n          return { ...state\n          };\n        });\n        state.lists[TargetCol].tasks[TaskIndex].drag = false;\n        return { ...state\n        };\n      }\n\n    case \"DROP\":\n      {\n        const TargetCol = FindItemIndexById(state.lists, action.payload.Cid);\n        const TargetObjectIndex = findObjectIDByDraggedProp(state.lists);\n        const startCoulmn = findDragStartCol(state.lists);\n\n        if (TargetCol !== startCoulmn) {\n          state.lists[TargetCol].tasks.push(state.lists[startCoulmn].tasks[TargetObjectIndex]);\n          state.lists.map(list => {\n            list.dragged = false;\n            list.tasks.map(task => {\n              task.drag = false;\n            });\n          });\n          delete state.lists[startCoulmn].tasks[TargetObjectIndex];\n          console.log(state);\n        }\n\n        return { ...state\n        };\n      }\n  }\n};\n\nexport const AppStateProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(appStateReducer, InitialState);\n  return /*#__PURE__*/React.createElement(AppStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, children);\n};\nexport const UseAppState = () => {\n  return useContext(AppStateContext);\n};","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx"],"names":["React","createContext","useContext","useReducer","useEffect","v1","uuid","FindItemIndexById","findObjectIDByDraggedProp","findDragStartCol","findDraggedTaskIndex","appData","lists","id","text","dragged","tasks","drag","localStorage","setItem","JSON","stringify","InitialState","getItem","parse","AppStateContext","appStateReducer","state","action","type","payload","TargetIndex","taskId","push","removeIndex","filter","item","toString","TargetCol","Cid","TaskIndex","map","list","TargetObjectIndex","startCoulmn","task","console","log","AppStateProvider","children","dispatch","UseAppState"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from \"react\"\nimport {v1 as uuid} from \"uuid\"; \n\nimport { FindItemIndexById, findObjectIDByDraggedProp, \n    findDragStartCol, findDraggedTaskIndex } from './FinItemByIndex'\nimport {Action, Task,\n        AppState, AppStateContextProps} from './type'\n\n  \n\nconst appData: AppState = {\n    \n    lists: [\n    {\n    id: \"0\",\n    text: \"To Do\",\n    dragged: false,\n    tasks: [{ id: \"c0\", text: \"Generate app scaffold\", drag:false }]\n    },\n    {\n    id: \"1\",\n    text: \"In Progress\",\n    dragged: false,\n    tasks: [{ id: \"c1\", text: \"Learn Typescript\", drag:false }]\n    },\n    {\n    id: \"2\",\n    text: \"Done\",\n    dragged: false,\n    tasks: [{ id: \"c3\", text: \"Begin to use static typing\", drag:false }]\n    }\n    ]\n}\n    \nuseEffect(() => {\n    localStorage.setItem('list', JSON.stringify(appData))\n},[appData])\n\nconst InitialState = {\n    appData:\nlocalStorage.getItem('list')==null\n?[]\n:JSON.parse(localStorage.getItem('list') as string) \n}\n\n    const AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\n   \n      \n    const appStateReducer = (state : AppState, action : Action) : AppState => {\n        switch(action.type){\n            case \"ADD_LIST\": {\n                return{\n                    ...state,\n                    lists : [\n                        ...state.lists, {id : uuid(), text: action.payload, dragged: false, tasks:[]}\n                    ]\n                    \n                }\n            }\n            case \"ADD_TASK\" : {\n                const TargetIndex = FindItemIndexById(state.lists, action.payload.taskId)\n                state.lists[TargetIndex].tasks.push({\n                    id: uuid(),\n                    text: action.payload.text,\n                    drag:false \n                })\n                return{\n                    ...state\n                }\n            }\n            case \"REMOVE_TASK\" : {\n                const removeIndex = FindItemIndexById(state.lists, action.payload.taskId)\n                state.lists.filter(item => item.id !== removeIndex.toString() )\n                return{\n                    ...state\n                }\n            }\n            case \"DRAGGED_TASK\" : {\n                const TargetCol = FindItemIndexById(state.lists, action.payload.Cid)\n       \n                const TaskIndex = \n                findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid)\n                state.lists[TargetCol].dragged = true\n                state.lists[TargetCol].tasks[TaskIndex].drag = true \n                return{\n                    ...state\n                }\n                }\n            case \"DRAGGED_TASK_END\" : {\n                const TargetCol = FindItemIndexById(state.lists, action.payload.Cid)\n                const TaskIndex = \n                findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid)\n                state.lists.map(list => {if(list.dragged===true) \n                    { list.dragged = false} \n                return {...state}} )\n                state.lists[TargetCol].tasks[TaskIndex].drag = false\n                return{\n                    ...state\n                }\n            }\n            \n            case \"DROP\": {\n                const TargetCol = FindItemIndexById(state.lists, action.payload.Cid)\n                const TargetObjectIndex = findObjectIDByDraggedProp(state.lists)\n                const startCoulmn = findDragStartCol(state.lists)\n                if(TargetCol !== startCoulmn)\n                {\n                    state.lists[TargetCol].tasks.push(state.lists[startCoulmn].tasks[TargetObjectIndex])\n                state.lists.map(list => {\n                    list.dragged = false\n                    list.tasks.map((task : Task) => {\n                        task.drag = false\n                    })\n                })\n                delete state.lists[startCoulmn].tasks[TargetObjectIndex]\n                console.log(state)\n                }\n                \n                return{\n                    ...state\n                }\n            }\n            }\n        }                           \n\n\n    export const AppStateProvider = ({children} : React.PropsWithChildren<{}>) => {\n        const [state, dispatch] = useReducer(appStateReducer, InitialState)\n            return(\n                <AppStateContext.Provider value = {{state, dispatch}}>\n                    {children}\n                </AppStateContext.Provider>\n            )\n        }\n\n    export const UseAppState = () => {\n        return useContext(AppStateContext)\n    }"]},"metadata":{},"sourceType":"module"}