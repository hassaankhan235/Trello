{"ast":null,"code":"export const FindItemIndexById = (items, id) => {\n  return items.findIndex(item => item.id === id);\n};\nexport const findIdByDraggedProp = (index, state) => {\n  state.lists[index].tasks.map(task => {\n    if (task.drag === false) {\n      return task.id;\n    }\n  });\n  return 'd';\n};\nexport const findObjectIDByDraggedProp = lists => {\n  let TaskIndex = -10;\n  lists.map(list => {\n    var _list$tasks;\n\n    const Tindex = (_list$tasks = list.tasks) === null || _list$tasks === void 0 ? void 0 : _list$tasks.findIndex(task => task.drag === true);\n\n    if (Tindex > -1) {\n      TaskIndex = Tindex;\n    }\n  });\n  return TaskIndex;\n};\nexport const findDragStartCol = lists => {\n  return lists.findIndex(item => {\n    return item.dragged === true;\n  });\n};\nexport const findDraggedTaskIndex = (lists, id, Cid) => {\n  let TaskIndex = -10;\n  let Tindex;\n  console.log(\"LIST IS\", lists);\n  Tindex = lists[Cid].tasks.findIndex(task => {\n    return task.id === id;\n  });\n\n  if (Tindex > -1) {\n    TaskIndex = Tindex;\n  }\n\n  return TaskIndex;\n};","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/FinItemByIndex.ts"],"names":["FindItemIndexById","items","id","findIndex","item","findIdByDraggedProp","index","state","lists","tasks","map","task","drag","findObjectIDByDraggedProp","TaskIndex","list","Tindex","findDragStartCol","dragged","findDraggedTaskIndex","Cid","console","log"],"mappings":"AAoBA,OAAO,MAAMA,iBAAiB,GAAG,CAAkBC,KAAlB,EAA+BC,EAA/B,KAA8C;AAC3E,SAAOD,KAAK,CAACE,SAAN,CAAiBC,IAAD,IAAaA,IAAI,CAACF,EAAL,KAAYA,EAAzC,CAAP;AACH,CAFM;AAIP,OAAO,MAAMG,mBAAmB,GAAG,CAACC,KAAD,EAAgBC,KAAhB,KAAyC;AACxEA,EAAAA,KAAK,CAACC,KAAN,CAAYF,KAAZ,EAAmBG,KAAnB,CAAyBC,GAAzB,CAA8BC,IAAD,IAAgB;AAC3C,QAAIA,IAAI,CAACC,IAAL,KAAc,KAAlB,EACA;AACE,aAAOD,IAAI,CAACT,EAAZ;AACD;AACJ,GALC;AAMF,SAAO,GAAP;AACC,CARI;AAUL,OAAO,MAAMW,yBAAyB,GAAIL,KAAD,IAA4B;AACnE,MAAIM,SAAkB,GAAG,CAAC,EAA1B;AACEN,EAAAA,KAAK,CAACE,GAAN,CAAWK,IAAD,IAAe;AAAA;;AACzB,UAAMC,MAAM,kBAAGD,IAAI,CAACN,KAAR,gDAAG,YAAYN,SAAZ,CAAuBQ,IAAD,IAAgBA,IAAI,CAACC,IAAL,KAAc,IAApD,CAAf;;AACC,QAAGI,MAAM,GAAG,CAAC,CAAb,EAAgB;AACdF,MAAAA,SAAS,GAAGE,MAAZ;AACD;AACH,GALC;AAMD,SAAOF,SAAP;AACF,CATM;AAWP,OAAO,MAAMG,gBAAgB,GAAIT,KAAD,IAAoB;AAClD,SAAOA,KAAK,CAACL,SAAN,CAAiBC,IAAD,IAAU;AAC/B,WAAOA,IAAI,CAACc,OAAL,KAAiB,IAAxB;AAA6B,GADxB,CAAP;AAED,CAHM;AAKP,OAAO,MAAMC,oBAAoB,GAAG,CAACX,KAAD,EAAiBN,EAAjB,EAA8BkB,GAA9B,KAAoD;AACtF,MAAIN,SAAkB,GAAG,CAAC,EAA1B;AACA,MAAIE,MAAJ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBd,KAAvB;AACAQ,EAAAA,MAAM,GAAGR,KAAK,CAACY,GAAD,CAAL,CAAWX,KAAX,CAAiBN,SAAjB,CAA4BQ,IAAD,IAAgB;AAChD,WAAOA,IAAI,CAACT,EAAL,KAAYA,EAAnB;AACD,GAFM,CAAT;;AAIE,MAAGc,MAAM,GAAG,CAAC,CAAb,EAAgB;AACbF,IAAAA,SAAS,GAAGE,MAAZ;AACD;;AACD,SAAOF,SAAP;AACF,CAZI","sourcesContent":["\n\ninterface Item {\n    id : string\n}\n\ninterface List {\n    id : string\n    text: string\n    dragged: boolean\n    tasks: Task[]\n}\n\ninterface Task {\n  id : string\n        text: string\n        drag: boolean\n}\n    \n\nexport const FindItemIndexById = <T extends Item> (items : T[], id: string) => {\n    return items.findIndex((item: T) => item.id === id)\n}\n\nexport const findIdByDraggedProp = (index: number, state: any) : string  => {\n    state.lists[index].tasks.map((task: Task) => {\n      if (task.drag === false)\n      {\n        return task.id\n      }  \n  })\n  return 'd'\n  }\n\n  export const findObjectIDByDraggedProp = (lists: List[]) : number => {\n    let TaskIndex : number = -10\n      lists.map((list: any) => {\n      const Tindex = list.tasks?.findIndex((task: Task) => task.drag === true ) \n       if(Tindex > -1) {\n         TaskIndex = Tindex\n       }\n    }) \n     return TaskIndex\n  }\n\n  export const findDragStartCol = (lists : List[]) => {\n    return lists.findIndex((item) => {\n      return item.dragged === true})\n  }\n\n  export const findDraggedTaskIndex = (lists : List[], id : string, Cid: any) : number => {\n    let TaskIndex : number = -10\n    let Tindex : number\n    console.log(\"LIST IS\", lists)\n    Tindex = lists[Cid].tasks.findIndex((task: Task) => {\n        return task.id === id\n      }  ) \n\n      if(Tindex > -1) {\n         TaskIndex = Tindex\n       }\n       return TaskIndex\n    } "]},"metadata":{},"sourceType":"module"}