{"ast":null,"code":"var _jsxFileName = \"/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx\";\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { v1 as uuid } from \"uuid\";\nimport { FindItemIndexById, findObjectIDByDraggedProp, findDragStartCol, findDraggedTaskIndex } from './FinItemByIndex';\nconst appData = {\n  lists: [{\n    id: \"0\",\n    text: \"To Do\",\n    dragged: false,\n    tasks: [{\n      id: \"c0\",\n      text: \"Generate app scaffold\",\n      drag: false\n    }]\n  }, {\n    id: \"1\",\n    text: \"In Progress\",\n    dragged: false,\n    tasks: [{\n      id: \"c1\",\n      text: \"Learn Typescript\",\n      drag: false\n    }]\n  }, {\n    id: \"2\",\n    text: \"Done\",\n    dragged: false,\n    tasks: [{\n      id: \"c3\",\n      text: \"Begin to use static typing\",\n      drag: false\n    }]\n  }]\n};\nconst AppStateContext = createContext({});\n\nconst appStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        return { ...state,\n          lists: [...state.lists, {\n            id: uuid(),\n            text: action.payload,\n            dragged: false,\n            tasks: []\n          }]\n        };\n      }\n\n    case \"ADD_TASK\":\n      {\n        const TargetIndex = FindItemIndexById(state.lists, action.payload.taskId);\n        state.lists[TargetIndex].tasks.push({\n          id: uuid(),\n          text: action.payload.text,\n          drag: false\n        });\n        return { ...state\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        const removeIndex = FindItemIndexById(state.lists, action.payload.taskId);\n        state.lists.filter(item => item.id !== removeIndex.toString());\n        return { ...state\n        };\n      }\n\n    case \"DRAGGED_TASK\":\n      {\n        const TargetCol = FindItemIndexById(state.lists, action.payload.Cid);\n        const TaskIndex = findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid);\n        state.lists[TargetCol].dragged = true;\n        state.lists[TargetCol].tasks[TaskIndex].drag = true;\n        return { ...state\n        };\n      }\n\n    case \"DRAGGED_TASK_END\":\n      {\n        const TargetCol = FindItemIndexById(state.lists, action.payload.Cid);\n        const TaskIndex = findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid);\n        state.lists.map(list => {\n          if (list.dragged === true) {\n            list.dragged = false;\n          }\n\n          return { ...state\n          };\n        });\n        state.lists[TargetCol].tasks[TaskIndex].drag = false;\n        return { ...state\n        };\n      }\n\n    case \"DROP\":\n      {\n        const TargetCol = FindItemIndexById(state.lists, action.payload.Cid);\n        const TargetObjectIndex = findObjectIDByDraggedProp(state.lists);\n        const startCoulmn = findDragStartCol(state.lists);\n\n        if (TargetCol !== startCoulmn) {\n          state.lists[TargetCol].tasks.push(state.lists[startCoulmn].tasks[TargetObjectIndex]);\n          state.lists.map(list => {\n            list.dragged = false;\n            list.tasks.map(task => {\n              task.drag = false;\n            });\n          });\n          delete state.lists[startCoulmn].tasks[TargetObjectIndex];\n          console.log(state);\n        }\n\n        return { ...state\n        };\n      }\n  }\n};\n\nexport const AppStateProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  return /*#__PURE__*/React.createElement(AppStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, children);\n};\nexport const UseAppState = () => {\n  return useContext(AppStateContext);\n};","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx"],"names":["React","createContext","useContext","useReducer","v1","uuid","FindItemIndexById","findObjectIDByDraggedProp","findDragStartCol","findDraggedTaskIndex","appData","lists","id","text","dragged","tasks","drag","AppStateContext","appStateReducer","state","action","type","payload","TargetIndex","taskId","push","removeIndex","filter","item","toString","TargetCol","Cid","TaskIndex","map","list","TargetObjectIndex","startCoulmn","task","console","log","AppStateProvider","children","dispatch","UseAppState"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\"\nimport {v1 as uuid} from \"uuid\"; \n\nimport { FindItemIndexById, findObjectIDByDraggedProp, \n    findDragStartCol, findDraggedTaskIndex } from './FinItemByIndex'\nimport {Action, Task,\n        List, AppState, AppStateContextProps} from './type'\n\nconst appData: AppState = {\n    lists: [\n    {\n    id: \"0\",\n    text: \"To Do\",\n    dragged: false,\n    tasks: [{ id: \"c0\", text: \"Generate app scaffold\", drag:false }]\n    },\n    {\n    id: \"1\",\n    text: \"In Progress\",\n    dragged: false,\n    tasks: [{ id: \"c1\", text: \"Learn Typescript\", drag:false }]\n    },\n    {\n    id: \"2\",\n    text: \"Done\",\n    dragged: false,\n    tasks: [{ id: \"c3\", text: \"Begin to use static typing\", drag:false }]\n    }\n    ]\n    }\n    \n\n    const AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\n   \n      \n       \n   \n        const appStateReducer = (state : AppState, action : Action) : AppState => {\n        switch(action.type){\n            case \"ADD_LIST\": {\n                return{\n                    ...state,\n                    lists : [\n                        ...state.lists, {id : uuid(), text: action.payload, dragged: false, tasks:[]}\n                    ]\n                    \n                }\n            }\n            case \"ADD_TASK\" : {\n                const TargetIndex = FindItemIndexById(state.lists, action.payload.taskId)\n                state.lists[TargetIndex].tasks.push({\n                    id: uuid(),\n                    text: action.payload.text,\n                    drag:false \n                })\n                return{\n                    ...state\n                }\n            }\n            case \"REMOVE_TASK\" : {\n                const removeIndex = FindItemIndexById(state.lists, action.payload.taskId)\n                state.lists.filter(item => item.id !== removeIndex.toString() )\n                return{\n                    ...state\n                }\n            }\n            case \"DRAGGED_TASK\" : {\n                const TargetCol = FindItemIndexById(state.lists, action.payload.Cid)\n       \n                const TaskIndex = \n                findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid)\n                state.lists[TargetCol].dragged = true\n                state.lists[TargetCol].tasks[TaskIndex].drag = true \n                return{\n                    ...state\n                }\n                }\n            case \"DRAGGED_TASK_END\" : {\n                const TargetCol = FindItemIndexById(state.lists, action.payload.Cid)\n                const TaskIndex = \n                findDraggedTaskIndex(state.lists, action.payload.taskId, action.payload.Cid)\n                state.lists.map(list => {if(list.dragged===true) \n                    { list.dragged = false} \n                return {...state}} )\n                state.lists[TargetCol].tasks[TaskIndex].drag = false\n                return{\n                    ...state\n                }\n            }\n            \n            case \"DROP\": {\n                const TargetCol = FindItemIndexById(state.lists, action.payload.Cid)\n                const TargetObjectIndex = findObjectIDByDraggedProp(state.lists)\n                const startCoulmn = findDragStartCol(state.lists)\n                if(TargetCol !== startCoulmn)\n                {\n                    state.lists[TargetCol].tasks.push(state.lists[startCoulmn].tasks[TargetObjectIndex])\n                state.lists.map(list => {\n                    list.dragged = false\n                    list.tasks.map((task : Task) => {\n                        task.drag = false\n                    })\n                })\n                delete state.lists[startCoulmn].tasks[TargetObjectIndex]\n                console.log(state)\n                }\n                \n                return{\n                    ...state\n                }\n            }\n            }\n        }                           \n\n\n    export const AppStateProvider = ({children} : React.PropsWithChildren<{}>) => {\n        const [state, dispatch] = useReducer(appStateReducer, appData)\n            return(\n                <AppStateContext.Provider value = {{state, dispatch}}>\n                    {children}\n                </AppStateContext.Provider>\n            )\n        }\n\n    export const UseAppState = () => {\n        return useContext(AppStateContext)\n    }"]},"metadata":{},"sourceType":"module"}