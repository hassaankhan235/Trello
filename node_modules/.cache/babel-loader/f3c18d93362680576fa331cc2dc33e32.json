{"ast":null,"code":"export var FindItemIndexById=function FindItemIndexById(items,id){return items.findIndex(function(item){return item.id===id;});};export var findIdByDraggedProp=function findIdByDraggedProp(index,state){state.lists[index].tasks.map(function(task){if(task!==null){if(task.drag===false){return task.id;}}});return'wrong';};export var findObjectIDByDraggedProp=function findObjectIDByDraggedProp(lists){var TaskIndex=-10;lists.map(function(list){var _list$tasks;var Tindex=(_list$tasks=list.tasks)===null||_list$tasks===void 0?void 0:_list$tasks.findIndex(function(task){return(task===null||task===void 0?void 0:task.drag)===true;});if(Tindex>-1){TaskIndex=Tindex;}});return TaskIndex;};export var findDragStartCol=function findDragStartCol(lists){return lists.findIndex(function(item){return item.dragged===true;});};export var findDraggedTaskIndex=function findDraggedTaskIndex(lists,id,Cid){var TaskIndex=-10;var Tindex;Tindex=lists[Cid].tasks.findIndex(function(task){return(task===null||task===void 0?void 0:task.id)===id;});if(Tindex>-1){TaskIndex=Tindex;}return TaskIndex;};","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/FinItemByIndex.ts"],"names":["FindItemIndexById","items","id","findIndex","item","findIdByDraggedProp","index","state","lists","tasks","map","task","drag","findObjectIDByDraggedProp","TaskIndex","list","Tindex","findDragStartCol","dragged","findDraggedTaskIndex","Cid"],"mappings":"AAOA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAkBC,KAAlB,CAA+BC,EAA/B,CAA8C,CAC3E,MAAOD,CAAAA,KAAK,CAACE,SAAN,CAAgB,SAACC,IAAD,QAAaA,CAAAA,IAAI,CAACF,EAAL,GAAYA,EAAzB,EAAhB,CAAP,CACH,CAFM,CAIP,MAAO,IAAMG,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAgBC,KAAhB,CAAyC,CACxEA,KAAK,CAACC,KAAN,CAAYF,KAAZ,EAAmBG,KAAnB,CAAyBC,GAAzB,CAA6B,SAACC,IAAD,CAAgB,CAC3C,GAAGA,IAAI,GAAK,IAAZ,CAAkB,CAChB,GAAIA,IAAI,CAACC,IAAL,GAAc,KAAlB,CACA,CACE,MAAOD,CAAAA,IAAI,CAACT,EAAZ,CACD,CACJ,CACE,CAPH,EAQF,MAAO,OAAP,CACC,CAVI,CAYL,MAAO,IAAMW,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACL,KAAD,CAA4B,CACnE,GAAIM,CAAAA,SAAkB,CAAG,CAAC,EAA1B,CACEN,KAAK,CAACE,GAAN,CAAU,SAACK,IAAD,CAAe,iBACzB,GAAMC,CAAAA,MAAM,cAAGD,IAAI,CAACN,KAAR,sCAAG,YAAYN,SAAZ,CAAsB,SAACQ,IAAD,CAAgB,CACnD,MAAO,CAAAA,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEC,IAAN,IAAe,IAAtB,CACD,CAFc,CAAf,CAGC,GAAGI,MAAM,CAAG,CAAC,CAAb,CAAgB,CACdF,SAAS,CAAGE,MAAZ,CACD,CACH,CAPC,EAQD,MAAOF,CAAAA,SAAP,CACF,CAXM,CAaP,MAAO,IAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACT,KAAD,CAAoB,CAClD,MAAOA,CAAAA,KAAK,CAACL,SAAN,CAAgB,SAACC,IAAD,CAAU,CAC/B,MAAOA,CAAAA,IAAI,CAACc,OAAL,GAAiB,IAAxB,CAA6B,CADxB,CAAP,CAED,CAHM,CAKP,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACX,KAAD,CAAiBN,EAAjB,CAA8BkB,GAA9B,CAAoD,CACtF,GAAIN,CAAAA,SAAkB,CAAG,CAAC,EAA1B,CACA,GAAIE,CAAAA,MAAJ,CACAA,MAAM,CAAGR,KAAK,CAACY,GAAD,CAAL,CAAWX,KAAX,CAAiBN,SAAjB,CAA2B,SAACQ,IAAD,CAAgB,CAChD,MAAO,CAAAA,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAET,EAAN,IAAaA,EAApB,CACD,CAFM,CAAT,CAIE,GAAGc,MAAM,CAAG,CAAC,CAAb,CAAgB,CACbF,SAAS,CAAGE,MAAZ,CACD,CACD,MAAOF,CAAAA,SAAP,CACF,CAXI","sourcesContent":["import {Task, List} from './type'\n\ninterface Item {\n    id : string\n}\n    \n\nexport const FindItemIndexById = <T extends Item> (items : T[], id: string) => {\n    return items.findIndex((item: T) => item.id === id)\n}\n\nexport const findIdByDraggedProp = (index: number, state: any) : string  => {\n    state.lists[index].tasks.map((task: Task) => {\n      if(task !== null) {\n        if (task.drag === false)\n        {\n          return task.id\n        } \n    }\n      })  \n  return 'wrong'\n  }\n\n  export const findObjectIDByDraggedProp = (lists: List[]) : number => {\n    let TaskIndex : number = -10\n      lists.map((list: any) => {\n      const Tindex = list.tasks?.findIndex((task: Task) => {\n        return task?.drag === true \n      } ) \n       if(Tindex > -1) {\n         TaskIndex = Tindex\n       }\n    }) \n     return TaskIndex\n  }\n\n  export const findDragStartCol = (lists : List[]) => {\n    return lists.findIndex((item) => {\n      return item.dragged === true})\n  }\n\n  export const findDraggedTaskIndex = (lists : List[], id : string, Cid: any) : number => {\n    let TaskIndex : number = -10\n    let Tindex : number\n    Tindex = lists[Cid].tasks.findIndex((task: Task) => {\n        return task?.id === id\n      }  ) \n\n      if(Tindex > -1) {\n         TaskIndex = Tindex\n       }\n       return TaskIndex\n    } "]},"metadata":{},"sourceType":"module"}