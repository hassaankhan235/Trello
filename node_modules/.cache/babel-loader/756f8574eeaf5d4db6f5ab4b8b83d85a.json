{"ast":null,"code":"var _jsxFileName = \"/home/khan/Desktop/Self Programming/typescript/practice/src/components/Column.tsx\";\nimport React from 'react';\nimport { ColumnContainer, ColumnTitle } from '../styles/styles';\nimport AddNewItem from '../components/AddNewItem';\nimport { UseAppState } from '../AppStateContect';\nimport Card from './Card';\nimport { findIdByDraggedProp } from '../FinItemByIndex';\nexport default function Column({\n  text,\n  index,\n  id,\n  hidden\n}) {\n  const {\n    state,\n    dispatch\n  } = UseAppState();\n\n  const handle = tid => {\n    setTimeout(() => dispatch({\n      type: \"DRAGGED_TASK\",\n      payload: {\n        Cid: id,\n        taskId: tid\n      }\n    }), 0);\n  };\n\n  const DragEnd = tid => {\n    setTimeout(() => dispatch({\n      type: \"DRAGGED_TASK_END\",\n      payload: {\n        Cid: id,\n        taskId: tid\n      }\n    }), 0);\n  };\n\n  const DragDrop = (e, Cid, tid) => {\n    dispatch({\n      type: \"DROP\",\n      payload: {\n        e,\n        Cid: id,\n        taskId: tid\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ColumnContainer, {\n    onDrop: e => DragDrop(e, id, findIdByDraggedProp(index, state)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ColumnTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, \" \", text, \" \"), state.lists[index].tasks.map(task => {\n    return /*#__PURE__*/React.createElement(Card, {\n      text: task.text,\n      hidden: hidden,\n      handleDrag: () => handle(task.id),\n      DragEnd: () => DragEnd(task.id),\n      DragOver: e => e.preventDefault(),\n      DragEnter: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }\n    });\n  }), /*#__PURE__*/React.createElement(AddNewItem, {\n    dark: true,\n    toggleButtonText: \"+ Add another task\",\n    onAdd: text => {\n      dispatch({\n        type: \"ADD_TASK\",\n        payload: {\n          text,\n          taskId: id\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/components/Column.tsx"],"names":["React","ColumnContainer","ColumnTitle","AddNewItem","UseAppState","Card","findIdByDraggedProp","Column","text","index","id","hidden","state","dispatch","handle","tid","setTimeout","type","payload","Cid","taskId","DragEnd","DragDrop","e","lists","tasks","map","task","preventDefault"],"mappings":"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","sourcesContent":["import React, { PropsWithChildren } from 'react'\nimport {ColumnContainer, ColumnTitle} from '../styles/styles'\nimport AddNewItem from '../components/AddNewItem'\nimport { UseAppState } from '../AppStateContect'\nimport Card from './Card'\nimport {findIdByDraggedProp} from '../FinItemByIndex'\n\n\ninterface ColumnProps {\n    text : string \n    index : number\n    id: string\n    hidden: boolean\n}\n\nexport default function Column({text, index, id, hidden} : PropsWithChildren<ColumnProps>) {\n  \n  const {state, dispatch} = UseAppState()\n\n  const handle = (tid: string) => {\n    setTimeout(() => dispatch({type:\"DRAGGED_TASK\", payload:{Cid: id, taskId: tid} }),\n      0\n    )\n  }\n  const DragEnd = (tid: string) => {\n    setTimeout(() => dispatch({type:\"DRAGGED_TASK_END\", payload:{Cid: id, taskId: tid} }),\n      0\n    )\n  }\n  const DragDrop = (e:React.DragEvent,  Cid: string, tid: string ) => {\n    dispatch({type:\"DROP\", payload:{e ,Cid: id, taskId: tid} })\n  }\n\n\n  \n  return (\n    <ColumnContainer  \n    \n    onDrop = {(e) => DragDrop(e, id, findIdByDraggedProp(index, state))} >\n    <ColumnTitle> {text} </ColumnTitle>\n    {state.lists[index].tasks.map((task) => {\n      return <Card text = {task.text}  \n      hidden = {hidden}\n      handleDrag = {() => handle(task.id)}\n      DragEnd = {() => DragEnd(task.id)} \n      DragOver = {(e) => e.preventDefault() }\n      DragEnter= {(e) => e.preventDefault()} \n     />\n    })}\n    <AddNewItem dark toggleButtonText= \"+ Add another task\" \n    onAdd= {\n      (text) => {dispatch({type:\"ADD_TASK\", payload:{text, taskId: id}})\n    }\n    } />\n    </ColumnContainer>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}