{"ast":null,"code":"var _jsxFileName = \"/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx\";\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { FindItemIndexById } from './FinItemByIndex';\nimport { v1 as uuid } from \"uuid\";\nconst appData = {\n  lists: [{\n    id: \"0\",\n    text: \"To Do\",\n    dragged: false,\n    tasks: [{\n      id: \"c0\",\n      text: \"Generate app scaffold\"\n    }]\n  }, {\n    id: \"1\",\n    text: \"In Progress\",\n    dragged: false,\n    tasks: [{\n      id: \"c1\",\n      text: \"Learn Typescript\"\n    }]\n  }, {\n    id: \"2\",\n    text: \"Done\",\n    dragged: false,\n    tasks: [{\n      id: \"c3\",\n      text: \"Begin to use static typing\"\n    }]\n  }]\n};\nconst AppStateContext = createContext({});\n\nconst appStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        return { ...state,\n          lists: [...state.lists, {\n            id: uuid(),\n            text: action.payload,\n            dragged: false,\n            tasks: []\n          }]\n        };\n      }\n\n    case \"ADD_TASK\":\n      {\n        const TargetIndex = FindItemIndexById(state.lists, action.payload.taskId);\n        state.lists[TargetIndex].tasks.push({\n          id: uuid(),\n          text: action.payload.text\n        });\n        return { ...state\n        };\n      }\n\n    case \"REMOVE_TASK\":\n      {\n        const removeIndex = FindItemIndexById(state.lists, action.payload.taskId);\n        state.lists.filter(item => item.id !== removeIndex.toString());\n        return { ...state\n        };\n      }\n\n    case \"DRAGGED_TASK\":\n      {\n        const drag = state.lists.findIndex(item => {\n          console.log('ID HERE IS', item.tasks.id, action.payload.taskId);\n          return item.tasks[0] === action.payload.taskId;\n        });\n        state.lists.map(item => {\n          return item.id === state.lists[drag].id ? !item.dragged : item.dragged;\n        });\n        return { ...state\n        };\n      }\n  }\n};\n\nexport const AppStateProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData);\n  return /*#__PURE__*/React.createElement(AppStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, children);\n};\nexport const UseAppState = () => {\n  return useContext(AppStateContext);\n};","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/AppStateContect.tsx"],"names":["React","createContext","useContext","useReducer","FindItemIndexById","v1","uuid","appData","lists","id","text","dragged","tasks","AppStateContext","appStateReducer","state","action","type","payload","TargetIndex","taskId","push","removeIndex","filter","item","toString","drag","findIndex","console","log","map","AppStateProvider","children","dispatch","UseAppState"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\"\nimport { FindItemIndexById } from './FinItemByIndex'\nimport { type } from \"os\"\nimport {v1 as uuid} from \"uuid\"; \nimport { DragItem } from './DragItem'\n\nconst appData: AppState = {\n    lists: [\n    {\n    id: \"0\",\n    text: \"To Do\",\n    dragged: false,\n    tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\n    },\n    {\n    id: \"1\",\n    text: \"In Progress\",\n    dragged: false,\n    tasks: [{ id: \"c1\", text: \"Learn Typescript\" }]\n    },\n    {\n    id: \"2\",\n    text: \"Done\",\n    dragged: false,\n    tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n    }\n    ]\n    }\n    \n    interface Task {\n        id : string\n        text: string\n    }\n\n    interface List {\n        id : string\n        text : string\n        dragged: boolean\n        tasks : Task[]\n    }\n    interface AppState {\n        lists : List[]\n    }\n\n    interface AppStateContextProps {\n        state : AppState\n        dispatch : React.Dispatch<Action>\n    }\n\n    const AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\n    type Action = \n        | {\n            type: 'ADD_LIST'\n            payload: string\n        }\n        | {\n            type: \"ADD_TASK\"\n            payload: {text: string; taskId: string}\n        }\n        | {\n            type: \"REMOVE_TASK\"\n            payload: {text:string; taskId: string}\n        }\n        | {\n            type: \"DRAGGED_TASK\"\n            payload: {taskId: string}\n        }\n      \n       \n   \n        const appStateReducer = (state : AppState, action : Action) : AppState => {\n        switch(action.type){\n            case \"ADD_LIST\": {\n                return{\n                    ...state,\n                    lists : [\n                        ...state.lists, {id : uuid(), text: action.payload, dragged: false, tasks:[]}\n                    ]\n                    \n                }\n            }\n            case \"ADD_TASK\" : {\n                const TargetIndex = FindItemIndexById(state.lists, action.payload.taskId)\n                state.lists[TargetIndex].tasks.push({\n                    id: uuid(),\n                    text: action.payload.text\n                })\n                return{\n                    ...state\n                }\n            }\n            case \"REMOVE_TASK\" : {\n                const removeIndex = FindItemIndexById(state.lists, action.payload.taskId)\n                state.lists.filter(item => item.id !== removeIndex.toString() )\n                return{\n                    ...state\n                }\n            }\n            case \"DRAGGED_TASK\" : {\n                const drag = state.lists.findIndex( (item: any) =>{\n                   console.log('ID HERE IS',item.tasks.id,action.payload.taskId)\n                    return item.tasks[0] === action.payload.taskId\n                } )\n                state.lists.map(item => {\n                   return item.id === state.lists[drag].id ? !item.dragged : item.dragged\n                }) \n                return{\n                    ...state\n                }\n                }\n            }\n        }                           \n\n\n    export const AppStateProvider = ({children} : React.PropsWithChildren<{}>) => {\n        const [state, dispatch] = useReducer(appStateReducer, appData)\n            return(\n                <AppStateContext.Provider value = {{state, dispatch}}>\n                    {children}\n                </AppStateContext.Provider>\n            )\n        }\n\n    export const UseAppState = () => {\n        return useContext(AppStateContext)\n    }"]},"metadata":{},"sourceType":"module"}