{"ast":null,"code":"var _jsxFileName = \"/home/khan/Desktop/Self Programming/typescript/practice/src/components/Column.tsx\";\nimport React from 'react';\nimport { ColumnContainer, ColumnTitle } from '../styles/styles';\nimport AddNewItem from '../components/AddNewItem';\nimport { UseAppState } from '../AppStateContect';\nimport Card from './Card';\nimport { handle, DragEnd } from '../Drag';\nexport default function Column({\n  text,\n  index,\n  id,\n  hidden\n}) {\n  const {\n    state,\n    dispatch\n  } = UseAppState();\n  return /*#__PURE__*/React.createElement(ColumnContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ColumnTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, \" \", text, \" \"), state.lists[index].tasks.map(task => {\n    return /*#__PURE__*/React.createElement(Card, {\n      text: task.text,\n      hidden: hidden,\n      handleDrag: () => handle(id, task.id),\n      DragEnd: () => DragEnd(id, task.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }\n    });\n  }), /*#__PURE__*/React.createElement(AddNewItem, {\n    dark: true,\n    toggleButtonText: \"+ Add another task\",\n    onAdd: text => {\n      dispatch({\n        type: \"ADD_TASK\",\n        payload: {\n          text,\n          taskId: id\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["/home/khan/Desktop/Self Programming/typescript/practice/src/components/Column.tsx"],"names":["React","ColumnContainer","ColumnTitle","AddNewItem","UseAppState","Card","handle","DragEnd","Column","text","index","id","hidden","state","dispatch","lists","tasks","map","task","type","payload","taskId"],"mappings":";AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACA,SAAQC,eAAR,EAAyBC,WAAzB,QAA2C,kBAA3C;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,SAA9B;AAUA,eAAe,SAASC,MAAT,CAAgB;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,EAAd;AAAkBC,EAAAA;AAAlB,CAAhB,EAA4E;AAEzF,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBV,WAAW,EAArC;AACA,sBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAeK,IAAf,MADA,EAECI,KAAK,CAACE,KAAN,CAAYL,KAAZ,EAAmBM,KAAnB,CAAyBC,GAAzB,CAA8BC,IAAD,IAAU;AACtC,wBAAO,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAIA,IAAI,CAACT,IAAnB;AACP,MAAA,MAAM,EAAIG,MADH;AAEP,MAAA,UAAU,EAAI,MAAMN,MAAM,CAACK,EAAD,EAAKO,IAAI,CAACP,EAAV,CAFnB;AAGP,MAAA,OAAO,EAAI,MAAMJ,OAAO,CAACI,EAAD,EAAKO,IAAI,CAACP,EAAV,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAID,GALA,CAFD,eAQA,oBAAC,UAAD;AAAY,IAAA,IAAI,MAAhB;AAAiB,IAAA,gBAAgB,EAAE,oBAAnC;AACA,IAAA,KAAK,EACFF,IAAD,IAAU;AAACK,MAAAA,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAAC,UAAN;AAAkBC,QAAAA,OAAO,EAAC;AAACX,UAAAA,IAAD;AAAOY,UAAAA,MAAM,EAAEV;AAAf;AAA1B,OAAD,CAAR;AACZ,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARA,CADF;AAgBD","sourcesContent":["import React, { PropsWithChildren } from 'react'\nimport {ColumnContainer, ColumnTitle} from '../styles/styles'\nimport AddNewItem from '../components/AddNewItem'\nimport { UseAppState } from '../AppStateContect'\nimport Card from './Card'\nimport {handle, DragEnd} from '../Drag'\n\n\ninterface ColumnProps {\n    text : string \n    index : number\n    id: string\n    hidden: boolean\n}\n\nexport default function Column({text, index, id, hidden} : PropsWithChildren<ColumnProps>) {\n  \n  const {state, dispatch} = UseAppState()\n  return (\n    <ColumnContainer  >\n    <ColumnTitle> {text} </ColumnTitle>\n    {state.lists[index].tasks.map((task) => {\n      return <Card text = {task.text}  \n      hidden = {hidden}\n      handleDrag = {() => handle(id, task.id)}\n      DragEnd = {() => DragEnd(id, task.id)} />\n    })}\n    <AddNewItem dark toggleButtonText= \"+ Add another task\" \n    onAdd= {\n      (text) => {dispatch({type:\"ADD_TASK\", payload:{text, taskId: id}})\n    }\n    } />\n    </ColumnContainer>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}